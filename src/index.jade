doctype html
html
    head
        meta(charset='utf-8')
        meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
        title Ember: An Introduction

        link(rel='stylesheet', type='text/css', href='build/build.css')

    body

        article

            section
                h1 Ember
                h2 An Introduction

            section
                h2 Routing
                h3.bullet First-Class Citizen
                ul
                    li Helps manage application state
                    li Each state represented by a URL
                    
            section
                h2 Active Route Handlers
                h3 At any time, one or more routes can be <em>active</em>
                h3.bullet What causes routes to change?
                ul
                    li User interaction with view -> URL change
                    li User manually changed URL
            
            section
                h2.bullet On Route Change
                ul
                    li Conditionally redirect to a new URL
                    li Update a controller
                    li Change the template
                    
            section
                h2 The Router
                h3 Where routing is configured
                pre.small
                    code.small.language-javascript.
                        App.Router.map(function() {
                            this.route("posts", function() {
                                this.route("activePost", { path: "/:id" }, function() {
                                    this.route("comments");
                                });
                            });
                        });
                    
            section
                h2 Outlets
                h3 Templates get rendered into parent route's 'outlet'
                pre
                    code.language-markup.
                        application
                            index
                            /posts
                                /posts/1
                                    /posts/1/comments
                    
            section
                h2 Templates
                h3 Markup / data-bindings
                h3.bullet Default 'application' template
                ul
                    li Header / Footer / Decorative Content
                    li At least one 'outlet'
                    
            section
                h2 Templates
                h3 Uses Handlebars (but moving to HTMLBars)
                h3 Logic-less
                pre
                    code.language-javascript.
                        &lt;script type="text/x-handlebars"&gt;
                            Hello, <strong>{{firstName}} {{lastName}}</strong>!
                        &lt;/script&gt;
                    
            section
                h2 Object Model
                h3.bullet Ember.Object
                ul
                    li Always 'extend()'
                    li init
                    li this._super() 
                    li (especially if overriding init of core class!)
                    
            section
                h2 Computed Properties
                h3.bullet Functions as properties!
                ul
                    li What did you say?
                    li FUNCTIONS AS PROPERTIES!
                    
            section
                pre.small
                    code.language-javascript.small.
                        App.Person = Ember.Object.extend({
                            // these will be supplied by `create`
                            firstName: null,
                            lastName: null,
                            fullName: function() {
                                return this.get('firstName') + ' ' + this.get('lastName');
                            }.property('firstName', 'lastName')
                        });
                        
                        var ironMan = App.Person.create({
                            firstName: "Tony",
                            lastName:  "Stark"
                        });
    
                        ironMan.get('fullName'); // "Tony Stark"

        script(src='build/build.js')
